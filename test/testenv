#!/bin/bash

set -euo pipefail

export SSDB_DEBUG=
export SSDB_SNAPDIR="$1"
export BAIL_ON_FAIL=1
ssdb="$2"
export TEST_NAME="${3:-TEST}"

function _log_prefix {
	local level="$1"
	local _caller
	_caller="$(caller 2)"
	_caller=($_caller)
	echo -e "$(date '+%Y-%m-%dT%H:%M:%S')\t[$level:${_caller[0]}:${_caller[1]}]\t"
}

function _log {
	local level="$1"
	local msg="$2"
	echo "$(_log_prefix "$level")${msg}" 1>&2
}

function error {
	_log 'error' "$1"
	exit 1
}

function maybe_bail {
	if [ ! -z "$BAIL_ON_FAIL" ]; then
		error 'BAIL_ON_FAIL'
	fi
}

function testres {
	local tname="$1"
	local expected_output="$2"
	shift
	shift
	local result
	if result=$("$@"); then
		if [ "$result" == "$expected_output" ]; then
			printf '\tOk: %s:%s\n' "$TEST_NAME" "$tname"
		else
			printf '\tFailed: %s:%s\n' "$TEST_NAME" "$tname"
			printf '\t\tGot: %s\n' "$result"
			printf '\t\tExpected: %s\n' "$expected_output"
			maybe_bail
		fi
	else
		printf '\tFailed: %s:%s\n' "$TEST_NAME" "$tname"
		printf '\t\tGot failure: %s\n' "$result"
		printf '\t\tExpected: %s\n' "$expected_output"
		maybe_bail
	fi
}

function testok {
	local tname="$1"
	shift
	local result
	if result=$("$@"); then
		printf '\tOk: %s:%s\n' "$TEST_NAME" "$tname"
	else
		printf '\tFailed: %s:%s\n' "$TEST_NAME" "$tname"
		printf '\t\tGot failure: %s\n' "$result"
		printf '\t\tExpected Ok\n'
		maybe_bail
	fi
}

function testfail {
	tname="$1"
	shift
	local result
	if result=$("$@"); then
		printf '\tFailed: %s:%s\n' "$TEST_NAME" "$tname"
		printf '\t\tGot: %s\n' "$result"
		printf '\t\tExpected to fail\n'
		maybe_bail
	else
		printf '\tOk: %s:%s\n' "$TEST_NAME" "$tname"
	fi
}

[ -z "$ssdb" ] && error "no ssdb executable given"
[ ! -x "$ssdb" ] && error "ssdb should be executable"

return 0
