#!/bin/bash

set -eu
set -o pipefail

SSDB_DEBUG="${SSDB_DEBUG:-}"

SSDB_SNAPDIR="${SSDB_SNAPDIR:-$HOME/.ssdb}"
SSDB_DATABASE="${SSDB_DATABASE:-default}"
SSDB_ENCRYPTION_KEY="${SSDB_ENCRYPTION_KEY:-}"
SSDB_CHECK_DEPENDENCIES="${SSDB_CHECK_DEPENDENCIES:-1}"
SSDB_META=''
DEBUG_INFO="$(printf '[%6d:%s]' "$$" "$USER")"
LOCK_SLEEP_PERIOD=0.1
LOCK_MAX_ATTEMPT=100

KEY_POSITION=0
META_POSITION=1
VALUE_POSITION=2

TAKEN_LOCKS=()

COMMON_DEPENDENCIES=(base64 cat sed printf mkdir sleep hexdump strings uname sed sort)
ENC_DEPENDENCIES=(openssl)
OS=$(uname -s)

mkdir -p "$SSDB_SNAPDIR"

function _echo {
	printf '%s\n' "${1:-}"
}

function _base64 {
	case "$OS" in
		Darwin)
			base64;;
		*)
			base64 -w 0;;
	esac
}

function _sed {
	case "$OS" in
		Darwin)
			local sed_args=()
			local inplace=''
			while [[ $# -gt 0 ]]; do
				arg="$1"
				debug "sedARG=$arg"
				if [ "$arg" == '-i' ]; then
					inplace="$2"
					shift
				else
					sed_args+=("$1")
				fi
				shift
			done

			if [ -z "$inplace" ]; then
				sed "${sed_args[@]}"
			else
				local newfile="${inplace}.inplace"
				sed "${sed_args[@]}" <"$inplace" > "$newfile"
				mv -f "$newfile" "$inplace"
			fi;;
		*)
			sed "$@";;
	esac
}

function _escape {
	echo "$1" | _sed 's/[^a-zA-Z 0-9]/\\&/g'
}

function _sort {
	LC_ALL=C LC_COLLATE=C sort "$@"
}

function _encrypt {
	openssl enc -e -k "$1" -aes256 2>/dev/null
}

function _decrypt {
	openssl enc -d -k "$1" -aes256 2>/dev/null
}

function _log_prefix {
	local level="$1"
	local _caller
	_caller="$(caller 2)"
	_caller=($_caller)
	printf '[%s:%s:%s]\t' "$level" "${_caller[0]}" "${_caller[1]}"
	# printf '%s\t[%s:%s:%s]\t' "$(date '+%Y-%m-%dT%H:%M:%S')" "$level" "${_caller[0]}" "${_caller[1]}"
}

function _log {
	local level="$1"
	local msg="$2"
	_echo "$(_log_prefix "$level")${msg}" 1>&2
}

function debug {
	if [ -n "$SSDB_DEBUG" ]; then
		_log 'debug' "$DEBUG_INFO  $*"
	fi
}

function warn {
	_log 'warning' "$*"
}

function error {
	_log 'error' "$*"

	# Disgusting hack for empty arrays on bash < 4.4
	if [ 0 -ne "${#TAKEN_LOCKS[@]}" ]; then
		for l in "${TAKEN_LOCKS[@]}"; do
			unlock "$l"
		done
	fi

	exit 127
}

function get_from_clip {
	case "$OS" in
		Darwin)
			pbpaste;;
		*)
			xsel -o --clipboard;;
	esac
}

function set_to_clip {
	case "$OS" in
		Darwin)
			_echo "$1" | pbcopy;;
		*)
			_echo "$1" | xsel -i --clipboard;;
	esac
}

function format_value {
	local value="$1"
	if [ ! -z "$SSDB_ENCRYPTION_KEY" ]; then
		local encrypted
		encrypted=$(printf '%s' "$value" | _encrypt "$SSDB_ENCRYPTION_KEY" | _base64)
		printf 'format=enc %s' "$encrypted"
		return 0
	fi

	if [ -z "$value" ]; then
		printf 'format=none'
		return 0
	fi

	if _has_char "$value" '\s'; then
		printf 'format=b64 %s' "$(printf '%s' "$value" | _base64)"
		return 0
	fi

	if ! _is_binary "$value"; then
		printf 'format=raw %s' "$value"
		return 0
	fi

	printf 'format=b64 %s' "$(printf '%s' "$value" | _base64)"
	return 0
}

function split {
	local del="$1"
	local str="$2"
	local IFS="$del"
	read -ra arr <<< "$str"
	for e in "${arr[@]}"; do
		_echo "$e"
	done
}

function meta2tag {
	local meta="$1"
	local metatag="$2"

	local metalist
	metalist=($(split ',' "$meta"))
	for tagline in "${metalist[@]}"; do
		local tag="${tagline%%=*}"
		local tagvalue="${tagline#*=}"
		if [ "$metatag" == "$tag" ]; then
			printf '%s' "$tagvalue"
			return 0
		fi
	done

	return 1
}

function line2key {
	debug "line2key '$1'"
	local l="$1"
	local larr=($l)
	_echo "${larr[$KEY_POSITION]}"
}

function line2meta {
	debug "line2key '$1'"
	local l="$1"
	local metatag="${2:-}"
	local larr=($l)
	local meta="${larr[$META_POSITION]}"
	if [ -z "$metatag" ]; then
		printf '%s' "$meta"
	fi

	meta2tag "$meta" "$metatag"
}

function line2value {
	debug "line2value '$1'"
	local l="$1"
	local larr=($l)
	_echo "${larr[$VALUE_POSITION]}"
}

function _has_char {
	local str="$1"
	local char="$2"
	_echo "$str" | grep -q "$char"
}

function _is_binary {
	local str="$1"

	local printable
	printable=$(_echo "$str" | strings -n 1)
	if [ "$printable" == "$str" ]; then
		return 1
	fi

	return 0
}

function _validate_meta {
	local meta="$1"

	local metalist
	metalist=($(split ',' "$meta"))

	for metaline in "${metalist[@]}"; do
		local delim="${metaline//[^=]}"

		if [ "${#delim}" -ne 1 ]; then
			error "metaline='$metaline' is invalid: amount of '=' characters must be exactly 1"
		fi

		local tag="${metaline%%=*}"
		local tagvalue="${metaline#*=}"
	done
}

function _is_valid_key {
	local key="$1"

	if _has_char "$key" '\s'; then
		_echo "key='$key' bs=${#key} has whitespaces"
		exit 127
	fi

	if _is_binary "$key"; then
		_echo "key='$key' bs=${#key} has forbidden characters"
		exit 127
	fi

	return 0
}

# PREAMBLE Welcome to
# PREAMBLE 
# PREAMBLE    __________ ____  ____
# PREAMBLE   / ___/ ___// __ \/ __ )
# PREAMBLE   \__ \\__ \/ / / / __  |
# PREAMBLE  ___/ /__/ / /_/ / /_/ /
# PREAMBLE /____/____/_____/_____/
# PREAMBLE 
# PREAMBLE 
# PREAMBLE SSDB stands for Supremely Stupid DataBase
# PREAMBLE The main concept of this 'DataBase' is
# PREAMBLE 	1) Being serverless
# PREAMBLE 	2) Being written in bash
# PREAMBLE 	3) Being written in as clean bash as possible (OK, I fucked it up when I added the dirtiest binary search possible (removed it, LOL))
# PREAMBLE 	4) Being written in single bash file
# PREAMBLE 	5) Having a snapshot that can be easily fixed in vim if needed
# PREAMBLE 	6) Having some sort of isolation, but not necessary
# PREAMBLE 
# PREAMBLE This is key-value DB that stores data in a file
# PREAMBLE It does not have a server, but it has a client (you are reading help for it at the moment)
# PREAMBLE 
# PREAMBLE Client's are kinda following gentelmens agreement on
# PREAMBLE 'How we, gentelmen, should write to this file called snapshot so it keeps being adequate'
# PREAMBLE 
# PREAMBLE The syntax is simple
# AUTODOC common 
# AUTODOC common ssdb [OPTIONS] COMMAND KEY ?VALUE
# AUTODOC common 
# AUTODOC common configurable options are
# AUTODOC common 
# AUTODOC common 	-D|--database|--db 'dbname'
# AUTODOC common 		use given database instead of default one ('default')
# AUTODOC common 		can also be configured with SSDB_DATABASE env option
# AUTODOC common 
# AUTODOC common 	-S|--snapdir 'snapdir'
# AUTODOC common 		use given snapshot_directory instead of default one ($HOME/.ssdb)
# AUTODOC common 		can also be configured with SSDB_SNAPDIR env option
# AUTODOC common 
# AUTODOC common 	-e|--encryption 'enckey'
# AUTODOC common 		use enryption key to encrypt and decrypt data
# AUTODOC common 		can also be configured with SSDB_ENCRYPTION_KEY env option
# AUTODOC common 		usage of encryption will add extra dependency: openssl
# AUTODOC common 
# AUTODOC common 	-r|--read-enryption
# AUTODOC common 		read enryption key from stdin
# AUTODOC common 		can also be configured with SSDB_ENCRYPTION_KEY env option
# AUTODOC common 		usage of encryption will add extra dependency: openssl
# AUTODOC common 
# AUTODOC common 	-d|--debug
# AUTODOC common 		use debug
# AUTODOC common 		can also be configured with SSDB_DEBUG env option
# AUTODOC common 
# AUTODOC common almost every command has a shorter version for comfortable usage in console
# AUTODOC common 
# AUTODOC common As for now KEY can't contain any whitespaces, special characters and binary shit
# AUTODOC common Because this is DB for gentlemen, and gentlemen are not going to use that symbols, not to spoil the fun for other gentlemen
# AUTODOC common I guess I will check for whitespaces easily, not so easy for binary shit
# AUTODOC common 
# AUTODOC common However VALUE can contain any of that
# AUTODOC common 
# AUTODOC common 
# AUTODOC help ssdb help [COMMAND]
# AUTODOC help ssdb h
# AUTODOC help 	prints this help
# AUTODOC help 	if COMMAND is given, it prints only help for specific COMMAND
# AUTODOC help 	COMMAND should be full ('ssdb help delete' will work, but 'ssdb help d' will not)
# MILESTONES 
# MILESTONES Roadmaps are
# MILESTONES 	1) Subscribe on any changes to the key
# MILESTONES 	2) Subscribe on any changes to the key that matches the wildcard 
# MILESTONES 	3) Replication)))
# MILESTONES 	4) More data structures (like sets, lists and maybe something else)
# MILESTONES 	5) More than single database (done, --database flag)
function print_help {
	helpfor="${1:-}"
	if [ -z "$helpfor" ]; then
		grep '^# PREAMBLE'   "$0" | _sed -e "s/^# PREAMBLE //g"
		grep '^# AUTODOC'    "$0" | _sed -e "s/^# AUTODOC [^ ]* //g"
		grep '^# MILESTONES' "$0" | _sed -e "s/^# MILESTONES //g"
	else
		grep "^# AUTODOC $helpfor" "$0" | _sed -e "s/^# AUTODOC [^ ]* //g"
	fi
}

function lock_name {
	_echo "${SSDB_SNAPDIR}/lock.${SSDB_DATABASE}.${1:-GLOBAL}"
}

function snap_name {
	local snap="${SSDB_SNAPDIR}/snap.${SSDB_DATABASE}"
	touch "$snap"
	_echo "$snap"
}

function lock {
	local lock_type="${1:-GLOBAL}"
	local lockdir
	lockdir=$(lock_name "$lock_type")
	TAKEN_LOCKS+=( "$lock_type" )

	debug "Locktype=$lock_type Lockdir=$lockdir"

	local lock_attempt=1

	until mkdir "$lockdir" 2>/dev/null; do
		debug "Attempt to take lock #$lock_attempt"
		lock_attempt=$(( lock_attempt + 1 ))
		sleep $LOCK_SLEEP_PERIOD
		if [ "$lock_attempt" -gt "$LOCK_MAX_ATTEMPT" ]; then
			debug "Failed to take $lock_type lock in $LOCK_MAX_ATTEMPT attempts"
			error "Failed to take $lock_type lock"
		fi
	done

	debug "Lock taken, attempt=$lock_attempt"
}

function unlock {
	local lock_type="${1+GLOBAL}"
	local lockdir
	lockdir=$(lock_name "$lock_type")
	[ -d "$lockdir" ] && rmdir "$lockdir"
	# debug "$lock_type lock removed"
}

function _set_key {
	local key="$1"
	local value="$2"
	local noreplace="${3:-}"

	value=$(format_value "$value")
	local insert_str="$key $value"
	local snap
	snap=$(snap_name)

	local linecnt
	if linecnt=$(_get_line_with_key "$key" 1); then
		if [ ! -z "$noreplace" ]; then
			debug "noreplace is set, can't update key value"
			printf "KEY_ALREADY_SET"
			return 1
		fi

		local escaped
		escaped=$(_escape "$insert_str")
		debug "_sed -i \"$snap\" -e \"${linecnt}s/.*/$escaped/\""
		_sed -i "$snap" -e "${linecnt}s/.*/$escaped/"
		return 0
	fi

	_echo "$insert_str" >> "$snap"
	_sort -k 1,1 -o "$snap" "$snap"
	return 0
}

function _list_keys {
	local snap
	snap=$(snap_name)

	sed 's/ .*//' "$snap"
}

function _delete_key {
	local key="$1"
	local snap
	snap=$(snap_name)

	local linecnt
	if linecnt=$(_get_line_with_key "$key" 1); then
		_sed -i "$snap" -e "${linecnt}d"
		return 0
	fi

	return 1
}

# returns full line containing key or line count with key
function _get_line_with_key {
	local key="$1"
	local givecnt="${2:-}"

	local snap
	snap=$(snap_name)

	local cnt=0
	while read -r line; do
		cnt=$(( cnt + 1 ))
		debug "[get] scanning for '$key' givecnt=$givecnt, line='$line'"
		if [ "$(line2key "$line")" == "$key" ]; then
			debug "FOUND $line"
			if [ -z "$givecnt" ]; then
				printf '%s' "$line"
			else
				printf '%d' "$cnt"
			fi
			return 0
		fi
	done < "$snap"
	return 1
}


# AUTODOC common 
# AUTODOC set ssdb set KEY VALUE
# AUTODOC set ssdb s   KEY VALUE
# AUTODOC set 	it sets a KEY to a VALUE
# AUTODOC set 	if the KEY was already present it overrides it
function run_set {
	lock GLOBAL
	debug "run_set $1 '$2'"

	local result
	if result="$(_set_key "$1" "$2")"; then
		debug "added"
	else
		local EXIT=$?
		debug "failed to set key, $result"
		unlock GLOBAL
		printf "%s" "$result"
		return $EXIT
	fi

	unlock GLOBAL
	printf 'OK'
	return 0
}


# AUTODOC common 
# AUTODOC add ssdb add KEY VALUE
# AUTODOC add ssdb a   KEY VALUE
# AUTODOC add 	it add a new KEY to a VALUE
# AUTODOC add 	if the KEY was already present it exits with error
function run_add {
	lock GLOBAL
	debug "run_set $1 '$2'"

	local result
	if result="$(_set_key "$1" "$2" noreplace)"; then
		debug "added"
	else
		local EXIT=$?
		debug "failed to set key, $result"
		unlock GLOBAL
		printf "%s" "$result"
		return $EXIT
	fi

	unlock GLOBAL
	printf 'OK'
	return 0
}


# AUTODOC common 
# AUTODOC delete ssdb delete KEY
# AUTODOC delete ssdb del    KEY
# AUTODOC delete ssdb d      KEY
# AUTODOC delete 	it deletes a KEY from ssdb
# AUTODOC delete 	if the KEY was not found it exits with error
function run_del {
	lock GLOBAL

	debug "run_del $1"
	if _delete_key "$1"; then
		debug "Found"
	else
		local EXIT=$?
		debug "Not found"
		unlock GLOBAL
		return $EXIT
	fi

	unlock GLOBAL

	printf 'OK'
	return 0
}


# AUTODOC common 
# AUTODOC get ssdb get KEY
# AUTODOC get ssdb g   KEY
# AUTODOC get 	it returns a VALUE that stands for KEY in ssdb
# AUTODOC get 	if the KEY was not found it exits with error
function run_get {
	lock GLOBAL

	debug "run_get $1"
	local line
	if line="$(_get_line_with_key "$1")"; then
		debug "Found line='$line'"
	else
		local EXIT=$?
		debug "Not Found"
		unlock GLOBAL
		return $EXIT
	fi

	unlock GLOBAL

	local fmt
	fmt=$(line2meta "$line" 'format')
	case "$fmt" in
		raw)
			printf '%s' "$(line2value "$line")"
			return 0;;
		b64)
			printf '%s' "$(line2value "$line")" | base64 --decode
			return 0;;
		enc)
			if [ -z "$SSDB_ENCRYPTION_KEY" ]; then
				printf 'VALUE is encrypted, you should pass encryption-key using -e or -r options'
				return 1
			fi

			printf '%s' "$(line2value "$line")" | base64 --decode | _decrypt "$SSDB_ENCRYPTION_KEY"
			return 0;;
		none)
			printf ''
			return 0;;
		*)
			error "Unknown fmt=$fmt";;
	esac
}


# AUTODOC common 
# AUTODOC check ssdb check KEY
# AUTODOC check ssdb c   KEY
# AUTODOC check 	it exits with 0 if KEY is present in ssdb
# AUTODOC check 	if the KEY was not found it exits with error
function run_check {
	lock GLOBAL

	debug "run_check $1"
	if _get_line_with_key "$1" 1 1>/dev/null; then
		unlock GLOBAL
		debug "Key present"
		return 0
	else
		local EXIT=$?
		unlock GLOBAL
		debug "Key absent"
		return $EXIT
	fi
}


# AUTODOC common 
# AUTODOC list ssdb list
# AUTODOC list ssdb l
# AUTODOC list 	returns sorted list of keys in ssdb
function run_list {
	lock GLOBAL

	debug "run_list"
	if result="$(_list_keys)"; then
		unlock GLOBAL
		debug "got keys"
		printf '%s\n' "$result"
		return 0
	else
		local EXIT=$?
		unlock GLOBAL
		debug "failed to list keys"
		return $EXIT
	fi
}


# AUTODOC common 
# AUTODOC snap ssdb snap
# AUTODOC snap 	returns snapshot as is (can be used for backup needs)
function run_snap {
	lock GLOBAL

	debug "run_snap"
	local snap
	snap=$(snap_name)
	cat "$snap"
	unlock GLOBAL
}


# AUTODOC common 
# AUTODOC bindump ssdb bindump
# AUTODOC bindump 	returns binary dumped snapshot (for debug puposes)
function run_bindump {
	lock GLOBAL

	debug "run_snap"
	local snap
	snap=$(snap_name)
	hexdump -ve '1/1 "(%_ad:%02d:"' -e '1/1 "%_c) "' "$snap"
	_echo
	unlock GLOBAL
}


# AUTODOC common 
# AUTODOC truncate ssdb truncate
# AUTODOC truncate 	deletes everything from ssdb
function run_truncate {
	lock GLOBAL

	debug "run_snap"
	local snap
	snap=$(snap_name)
	printf '' > "$snap"
	unlock GLOBAL
}

# AUTODOC common 
# AUTODOC copy ssdb copy KEY
# AUTODOC copy ssdb cp KEY
# AUTODOC copy 	it copies value of KEY to your clipboard
function run_copy {
	debug "run_copy $1"
	local value
	value="$(run_get "$1")"
	set_to_clip "$value"
	printf 'OK'
	return 0
}

# AUTODOC common 
# AUTODOC paste ssdb paste KEY
# AUTODOC paste ssdb p KEY
# AUTODOC paste 	it sets KEY as content of your clipboard
function run_paste {
	debug "run_paste $1"
	local value
	value="$(get_from_clip)"
	run_set "$1" "$value"
}

# AUTODOC common 
# AUTODOC depcheck ssdb dep|depcheck
# AUTODOC depcheck 	checks external dependecies
function check_dependencies {
	for dep in "${COMMON_DEPENDENCIES[@]}"; do
		if ! type "$dep" 1>/dev/null 2>/dev/null; then
			error "Unmet dependency: $dep"
		fi
	done

	if [ ! -z "$SSDB_ENCRYPTION_KEY" ]; then
		for dep in "${ENC_DEPENDENCIES[@]}"; do
			if ! type "$dep" 1>/dev/null 2>/dev/null; then
				error "Unmet dependency: $dep"
			fi
		done
	fi
}

COMMAND=""
KEY=""
VALUE=""

while [[ $# -gt 0 ]]; do
	option="$1"
	debug "parsing $option"

	case $option in
		-D|--database|--db)
			SSDB_DATABASE="${2:-}"
			[ -z "$SSDB_DATABASE" ] && error "$option param can not be empty"
			shift 2
			;;
		-S|--snapdir)
			SSDB_SNAPDIR="$2"
			[ -z "$SSDB_SNAPDIR" ] && error "$option param can not be empty"
			shift 2
			;;
		-e|--encryption)
			SSDB_ENCRYPTION_KEY="$2"
			[ -z "$SSDB_ENCRYPTION_KEY" ] && error "$option param can not be empty"
			shift 2
			;;
		-r|--read-encryption)
			printf 'Enter passphrase: ' 1>&2
			read -s enc_key;
			SSDB_ENCRYPTION_KEY="$enc_key"
			[ -z "$SSDB_ENCRYPTION_KEY" ] && error "$option param can not be empty"
			shift
			;;
		-m|--meta)
			SSDB_META="$2"
			[ -z "$SSDB_META" ] && error "No meta was passed"
			shift 2
			;;
		-d|--debug)
			SSDB_DEBUG=1
			shift
			;;
		*)
			break;;
	esac
done

if [ "$SSDB_CHECK_DEPENDENCIES" -ne 0 ]; then
	check_dependencies
fi

GIVEN_COMMAND="${1:-}"

case "$GIVEN_COMMAND" in
	a|add|d|del|delete|g|get|c|check|s|set|cp|copy|p|paste)
		KEY="${2:-}"
		if [ -z "$KEY" ]; then
			error "KEY can't be empty"
		fi
		case "$GIVEN_COMMAND" in
			a|add|s|set)
				case "$GIVEN_COMMAND" in
					a|add)
						COMMAND="add";;
					s|set)
						COMMAND="set";;
				esac

				if [ -z "${3+x}" ]; then
					error "VALUE is undefined"
				else
					VALUE="$3"
					shift 3
				fi
				;;
			d|del|delete)
				COMMAND="del"
				shift 2
				;;
			g|get)
				COMMAND="get"
				shift 2
				;;
			c|check)
				COMMAND="check"
				shift 2
				;;
			cp|copy)
				COMMAND="copy"
				shift 2
				;;
			p|paste)
				COMMAND="paste"
				shift 2
				;;
		esac;;
	l|list)
		COMMAND="list"
		shift;;
	snap)
		COMMAND="snap"
		shift;;
	bindump)
		COMMAND="bindump"
		shift;;
	truncate)
		COMMAND="truncate"
		shift;;
	dep|depcheck)
		COMMAND="depcheck"
		shift;;
	h|help)
		COMMAND="help"
		shift
		if [[ $# -eq 1 ]]; then
			KEY="$1";
			shift
		else
			KEY=""
		fi
		;;
	'')
		error "No command given, consider running 'ssdb help'";;
	*)
		error "'$GIVEN_COMMAND' command is unknown, consider running 'ssdb help'";;
esac

debug "COMMAND=$COMMAND KEY=$KEY VALUE=$VALUE"
debug "SSDB_SNAPDIR=$SSDB_SNAPDIR"
debug "SSDB_ENCRYPTION_KEY=$SSDB_ENCRYPTION_KEY"

if [[ $# -gt 0 ]]; then
	error 'extra params left, usage ssdb [OPTIONS] COMMAND ?ARG1 ?ARG2'
fi

if [ -n "$KEY" ]; then
	_is_valid_key "$KEY"
fi

case "$COMMAND" in
	add)
		run_add "$KEY" "$VALUE";;
	set)
		run_set "$KEY" "$VALUE";;
	del)
		run_del "$KEY";;
	get)
		run_get "$KEY";;
	check)
		run_check "$KEY";;
	list)
		run_list;;
	snap)
		run_snap;;
	bindump)
		run_bindump;;
	truncate)
		run_truncate;;
	copy)
		run_copy "$KEY";;
	paste)
		run_paste "$KEY";;
	help)
		print_help "$KEY";;
	depcheck)
		check_dependencies;;
	*)
		error "'$COMMAND' command is parsed but not implemented yet";;
esac
