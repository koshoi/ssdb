#!/bin/bash

set -eu
set -o pipefail

DEBUG="${SSDB_DEBUG:-}"

SNAPDIR="${SSDB_SNAPDIR:-/tmp/ssdb_snap}"
DBNAME="${SSDB_DATABASE:-default}"
DEBUG_INFO="$(printf '[%6d:%s]' "$$" "$USER")"
LOCK_SLEEP_PERIOD=0.1
LOCK_MAX_ATTEMPT=100

TAKEN_LOCKS=()

DEPENDENCIES=(base64 cat cat sed printf mkdir sleep echo)
mkdir -p "$SNAPDIR"

function debug {
	if [ -n "$DEBUG" ]; then
		echo "DEBUG: $DEBUG_INFO  $*" 1>&2
	fi
}

function warn {
	echo "WARNING: $*" 1>&2
}

function error {
	echo "ERROR: $*" 1>&2

	# Disgusting hack for empty arrays on bash < 4.4
	if [ 0 -ne "${#TAKEN_LOCKS[@]}" ]; then
		for l in "${TAKEN_LOCKS[@]}"; do
			unlock "$l"
		done
	fi

	exit 127
}

for dep in "${DEPENDENCIES[@]}"; do
	if ! type "$dep" 1>/dev/null 2>/dev/null; then
		error "Unmet dependency: $dep"
	fi
done


function print_help {
cat <<'EOF'

Welcome to

   __________ ____  ____ 
  / ___/ ___// __ \/ __ )
  \__ \\__ \/ / / / __  |
 ___/ /__/ / /_/ / /_/ /
/____/____/_____/_____/


SSDB stands for Shebang Started DataBase
The main concept of this 'DataBase' is
	1) Being serverless
	2) Being written in bash
	3) Beign written in as clean bash as possible
	4) Being written in single bash file
	5) Having a snapshot that can be easily fixed in vim if needed
	6) Having some sort of isolation, but not necessary

This is key-value DB that stores data in a file
It does not have a server, but it has a client (you are reading help for it at the moment)

Client's are kinda following gentelmens agreement on
'How we, gentelmen, should write to this file called snapshot so it keeps being adequate'

The syntax is simple

ssdb add   KEY VALUE
ssdb del   KEY
ssdb get   KEY
ssdb check KEY
ssdb list
ssdb help

As for now KEY can't contain any whitespaces, special characters and binary shit
Because this is DB for gentlemen, and gentlemen are not going to use that symbols, not to spoil the fun for other gentlemen
I guess I will check for whitespaces easily, not so easy for binary shit

However VALUE can contain any of that

Roadmaps are
	1) Subscribe on any changes to the key
	2) Subscribe on any changes to the key that matches the wildcard 
	3) Replication)))
	4) More data structures (like sets, lists and maybe something else)
	5) More than single database
EOF
}

function lock_name {
	echo "${SNAPDIR}/lock.${DBNAME}.${1:-GLOBAL}"
}

function snap_name {
	snap="${SNAPDIR}/snap.${DBNAME}"
	touch "$snap"
	echo "$snap"
}

function lock {
	lock_type="${1:-GLOBAL}"
	lockdir=$(lock_name "$lock_type")
	TAKEN_LOCKS+=( "$lock_type" )

	debug "Locktype=$lock_type Lockdir=$lockdir"

	lock_attempt=1

	until mkdir "$lockdir" 2>/dev/null; do
		debug "Attempt to take lock #$lock_attempt"
		lock_attempt=$(( lock_attempt + 1 ))
		sleep $LOCK_SLEEP_PERIOD
		if [ "$lock_attempt" -gt "$LOCK_MAX_ATTEMPT" ]; then
			debug "Failed to take $lock_type lock in $LOCK_MAX_ATTEMPT attempts"
			error "Failed to take $lock_type lock"
		fi
	done

	debug "Lock taken, attempt=$lock_attempt"
}

function unlock {
	lock_type="${1+GLOBAL}"
	lockdir=$(lock_name "$lock_type")
	rmdir "$lockdir"
	debug "$lock_type lock removed"
}

function _add_key {
	key="$1"
	value="$2"
	snap=$(snap_name)
	line_count=0
	found=

	while read -r -a line; do
		line_count=$(( line_count + 1 ))
		debug "[delete] scanning for '$key', [0]='${line[0]}' [1]='${line[1]}'"
		if [ "${line[0]}" == "$key" ]; then
			debug "Found line_count=$line_count"
			found=1
			break
		fi
	done < "$snap"

	if [ ! -z "$found" ]; then
		debug sed -i "$snap" -e "${line_count}s/.*/$key $value/"
		sed -i "$snap" -e "${line_count}s/.*/$key $value/"
		printf '%s' "$value"
		return 0
	else
		printf '%s %s\n' "$key" "$value" >> "$snap"
		printf '%s' "$value"
	fi
}

function run_add {
	lock GLOBAL
	value="$(printf '%s' "$2" | base64 -w 0)"
	debug "run_add $1 $value"

	if result="$(_add_key "$1" "$value")"; then
		debug "added"
	else
		EXIT=$?
		debug "Something bad happend, $result"
		unlock GLOBAL
		return $EXIT
	fi

	unlock GLOBAL
	printf '%s' "$2"
	return 0
}

# returns b64-encoded value
function _delete_key {
	key="$1"
	snap=$(snap_name)
	value=""
	line_count=0

	while read -r -a line; do
		line_count=$(( line_count + 1 ))
		debug "[delete] scanning for '$key', [0]='${line[0]}' [1]='${line[1]}'"
		if [ "${line[0]}" == "$key" ]; then
			debug "Found line_count=$line_count"
			value="${line[1]}"
			break
		fi
	done < "$snap"

	if [ ! -z "$value" ]; then
		debug sed -i "$snap" -e "${line_count}d"
		sed -i "$snap" -e "${line_count}d"
		printf '%s' "$value"
		return 0
	else
		return 1
	fi
}

function run_del {
	lock GLOBAL

	debug "run_del $1"
	if result="$(_delete_key "$1")"; then
		debug "Found"
	else
		EXIT=$?
		debug "Not found"
		unlock GLOBAL
		return $EXIT
	fi

	unlock GLOBAL

	printf '%s' "$result" | base64 -d
	return 0
}

# returns b64-encoded value
function _get_by_key {
	key="$1"
	no_value="${2-}"
	snap=$(snap_name)
	while read -r -a line; do
		debug "[get] scanning for '$key' no_value=$no_value, [0]='${line[0]}' [1]='${line[1]}'"
		if [ "${line[0]}" == "$key" ]; then
			debug "FOUND ${line[1]}"
			if [ -z "$no_value" ]; then
				printf '%s' "${line[1]}"
			fi
			return 0
		fi
	done < "$snap"
	return 1
}

function run_get {
	lock GLOBAL

	debug "run_get $1"
	if result="$(_get_by_key "$1")"; then
		debug "Found"
	else
		EXIT=$?
		debug "Not Found"
		unlock GLOBAL
		return $EXIT
	fi

	unlock GLOBAL

	# decoding comes because of issues with newlines in values
	printf '%s' "$result" | base64 -d
}

function run_check {
	lock GLOBAL

	debug "run_check $1"
	if _get_by_key "$1" 1; then
		unlock GLOBAL
		debug "Key present"
		return 0
	else
		EXIT=$?
		unlock GLOBAL
		debug "Key absent"
		return $EXIT
	fi
}

function _list_keys {
	snap=$(snap_name)

	keylist="$(sed 's/ .*//' "$snap")"
	printf '%s' "$keylist"
	return 0
}

function run_list {
	lock GLOBAL

	debug "run_list"
	if result="$(_list_keys)"; then
		unlock GLOBAL
		debug "got keys"
		printf '%s\n' "$result"
		return 0
	else
		EXIT=$?
		unlock GLOBAL
		debug "failed to list keys"
		return $EXIT
	fi
}

COMMAND=""
KEY=""
VALUE=""

GIVEN_COMMAND="${1:-}"

case "$GIVEN_COMMAND" in
	a|add|d|del|g|get|c|check)
		KEY="${2:-}"
		if [ -z "$KEY" ]; then
			error "KEY can't be empty"
		fi
		case "$GIVEN_COMMAND" in
			a|add)
				COMMAND="add"

				if [ -z "${3+x}" ]; then
					error "VALUE is undefined"
				else
					VALUE="$3"
				fi
				;;
			d|del)
				COMMAND="del";;
			g|get)
				COMMAND="get";;
			c|check)
				COMMAND="check";;
		esac;;
	l|list)
		COMMAND="list";;
	h|help)
		COMMAND="help";;
	'')
		error "No command given, consider running 'ssdb help'";;
	*)
		error "'$GIVEN_COMMAND' command is unknown, consider running 'ssdb help'";;
esac
shift

debug "COMMAND=$COMMAND KEY=$KEY VALUE=$VALUE"
debug "SNAPDIR=$SNAPDIR"

case "$COMMAND" in
	add)
		run_add "$KEY" "$VALUE";;
	del)
		run_del "$KEY";;
	get)
		run_get "$KEY";;
	check)
		run_check "$KEY";;
	list)
		run_list;;
	help)
		print_help;;
	*)
		error "'$COMMAND' command is parsed but not implemented yet";;
esac

debug 'SSDB done'
